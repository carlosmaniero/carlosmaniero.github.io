<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maniero</title><link href="https://maniero.me/" rel="alternate"></link><link href="https://maniero.me/feeds/all.atom.xml" rel="self"></link><id>https://maniero.me/</id><updated>2024-08-29T00:00:00-03:00</updated><subtitle>Personal blog, mostly about software engineering.</subtitle><entry><title>Teach More, Abstract Less</title><link href="https://maniero.me/teach-more-abstract-less.html" rel="alternate"></link><published>2024-08-29T00:00:00-03:00</published><updated>2024-08-29T00:00:00-03:00</updated><author><name>Maniero</name></author><id>tag:maniero.me,2024-08-29:/teach-more-abstract-less.html</id><summary type="html">&lt;p&gt;As developers progress in their careers, they often find themselves in a
position to enhance team productivity. Itâ€™s only natural for senior developers
to keenly observe where their teams face technical challenges.&lt;/p&gt;
&lt;p&gt;Consider this scenario: Your colleagues are grappling with a new tool that the
team collectively decided to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As developers progress in their careers, they often find themselves in a
position to enhance team productivity. Itâ€™s only natural for senior developers
to keenly observe where their teams face technical challenges.&lt;/p&gt;
&lt;p&gt;Consider this scenario: Your colleagues are grappling with a new tool that the
team collectively decided to adopt. Perhaps you championed this choice due to
your familiarity with the tool. During the teamâ€™s learning curve, you noticed a
dip in productivity.&lt;/p&gt;
&lt;p&gt;In a stroke of brilliance, you decide to build an abstraction layer on top of
the tool. You invest days, maybe even weeks, implementing this abstraction.
Your team approves, and your colleagues appreciate the newfound ease.
Productivity returns to its previous level, and all seems well.&lt;/p&gt;
&lt;p&gt;Yet, thereâ€™s a catch. Occasionally, the abstraction needs extensions. Your
teammates, less comfortable with the underlying tool, hesitate to make these
changes. To prevent them from spending excessive time wrestling with both the
abstraction and the tool, you step in and handle the modifications.&lt;/p&gt;
&lt;p&gt;Fast forward: You take a well-deserved vacation. During your absence, the team
faces a situation requiring adjustments to the abstraction. Suddenly, theyâ€™re
caught in a bindâ€”they must navigate both your abstraction and the underlying
tool. The end result? The once-elegant abstraction don't look so great anymore.&lt;/p&gt;
&lt;p&gt;You could blame the labor rights, after all, who needs more than two or three
days of vacation?&lt;/p&gt;
&lt;p&gt;You might be tempted to blame labor rightsâ€”after all, who needs more than a
couple of days off? But letâ€™s focus on the heart of the matter: abstractions.
They demand cautious handling. Before creating one, consider whether your team
can effectively support it. Abstractions should never be the first answer to
knowledge gaps.&lt;/p&gt;
&lt;p&gt;In fact, creating abstraction to help junior developers to perform is the
most perverse solution for their careers. It inadvertently robs them of
valuable learning opportunities and autonomy. Usually these abstractions
lacks documentation leaving junior team member with no reliable reference
point.&lt;/p&gt;
&lt;p&gt;So, hereâ€™s an alternative approach: Teach before you abstract. Invest time in
mentoring your colleagues. Pair with them, share knowledge, and foster a
collaborative environment. When the team collectively decides to abstract
something, everyone will possess the necessary foundation to contribute
effectively.&lt;/p&gt;</content><category term="Engineer life"></category></entry><entry><title>A WORD in Software testing</title><link href="https://maniero.me/a-word-in-software-testing.html" rel="alternate"></link><published>2023-08-04T00:00:00-03:00</published><updated>2023-08-04T00:00:00-03:00</updated><author><name>Maniero</name></author><id>tag:maniero.me,2023-08-04:/a-word-in-software-testing.html</id><summary type="html">&lt;p&gt;Software testing has long been a critical component of ensuring software quality. 
If you are familiar with the ACCELERATE book, you'll know that continuous delivery
is key to achieving a high-performance organization, and a good testing strategy 
is essential to enable it.&lt;/p&gt;
&lt;p&gt;There are many resources about testing, integration tests â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software testing has long been a critical component of ensuring software quality. 
If you are familiar with the ACCELERATE book, you'll know that continuous delivery
is key to achieving a high-performance organization, and a good testing strategy 
is essential to enable it.&lt;/p&gt;
&lt;p&gt;There are many resources about testing, integration tests, unit tests, TDD, and so on.
I would like to have a more abstract discussion about what you should to consider
before taking decisions on testing. &lt;/p&gt;
&lt;p&gt;Long story short, after several meaningful discussions with many teams, 
I've noticed that we always end up with four key principles, 
which I describe using the acronym &lt;strong&gt;W.O.R.D.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;W.O.R.D.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It &lt;strong&gt;Works&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;Orients&lt;/strong&gt; the development and code design.&lt;/li&gt;
&lt;li&gt;It is easy to &lt;strong&gt;Refactor&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It is a &lt;strong&gt;Debugging&lt;/strong&gt; tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;It WORKS!&lt;/h2&gt;
&lt;p&gt;One of the main concerns in software quality is to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"satisfy the customer through 
 early and continuous delivery of valuable software".
 &lt;a href="https://agilemanifesto.org/principles.html"&gt;Agile Manifesto&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any testing strategy must provide the safety that any change that passes all tests 
can be ship to production with no fear. A testing strategy that covers the application
into different levels is required to reach that confidence. &lt;/p&gt;
&lt;p&gt;It also requires a team that fully understands that software quality is a role of all.
Testing culture is an important matter here and  Developers should not write tests
just to reach a quality gate metric. &lt;/p&gt;
&lt;h2&gt;It ORIENTS the development and code design!&lt;/h2&gt;
&lt;p&gt;A good testing strategy should make the development process easier by allowing you to 
test small parts of a complex solution individually.&lt;/p&gt;
&lt;p&gt;Also, tests can provide valuable insights into the quality of your code. 
If the test is too complex to read and cannot be simplified, 
it may indicate a code smell not in the test itself but in the production code.&lt;/p&gt;
&lt;h2&gt;It is easy to REFACTOR!&lt;/h2&gt;
&lt;p&gt;I often hear people complaining about how tests make their life miserable during the 
refactoring process. Tests are not supposed to break during a refactor. 
If it does, it is a smell that your tests are not focusing on at the crucial point of
any application: Its behavior.&lt;/p&gt;
&lt;p&gt;Developers sometimes focus too much on implementation details. 
If tests are too tightly coupled to the implementation, refactoring can be difficult
and time-consuming. It's important to strike a balance between testing implementation
details and testing the application's behavior.
Avoid relying too heavily on mocks and instead, focus on validating the behavior of the
application.&lt;/p&gt;
&lt;h2&gt;It is a DEBUGGING tool&lt;/h2&gt;
&lt;p&gt;No application is completely bulletproof, and bugs will inevitably occur.
When they do, your testing strategy must be capable of simulating these issues.
If you're unable to replicate a bug, it suggests that there are certain scenarios that
your test strategy isn't covering, which directly impacts the &lt;strong&gt;"It Works"&lt;/strong&gt; principle.&lt;/p&gt;
&lt;p&gt;Ensure that your testing strategy adapts to your application's increasing complexity.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;With these four principles in mind, it's important to iterate and constantly evaluate your
testing strategy with your team. Ensure that you are covering all four principles and 
look for ways to improve your testing approach. These simple principles can help you make 
better and more informed decisions about your testing strategy.&lt;/p&gt;</content><category term="Engineer life"></category></entry><entry><title>DunnOS - Building my own OS</title><link href="https://maniero.me/dunnos-building-my-own-os.html" rel="alternate"></link><published>2022-11-28T00:00:00-03:00</published><updated>2022-11-28T00:00:00-03:00</updated><author><name>Maniero</name></author><id>tag:maniero.me,2022-11-28:/dunnos-building-my-own-os.html</id><summary type="html">&lt;p&gt;I believe that every single developer has thought about building
their OS. At least a Linux distro, or maybe their 
programming language.&lt;/p&gt;
&lt;p&gt;Taking the first step is hard. You may have had a few lessons on assembly
and how computers work in college (if you went on one), but it â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I believe that every single developer has thought about building
their OS. At least a Linux distro, or maybe their 
programming language.&lt;/p&gt;
&lt;p&gt;Taking the first step is hard. You may have had a few lessons on assembly
and how computers work in college (if you went on one), but it is hard to
put this knowledge into practice in the modern tech industry.&lt;/p&gt;
&lt;h2&gt;Doing to learn&lt;/h2&gt;
&lt;p&gt;It has been nice to do stuff just because I want to. My only goal
is learning. And I have made some pretty cool stuff since I started to 
learn more low-level stuff.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I made a lisp programming language to sum numbers using LLVM ðŸ˜‚ &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/carlosmaniero/mars" target="_blank"&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/carlosmaniero/mars/blob/main/demo/sum.mars" target="_blank"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I wrote a lightweight unit-test tool for assembly:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/carlosmaniero/assembly-study" target="_blank"&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of these projects went too far. But who cares! I learned a lot on the 
way. And I really recommend you to do stuff just because you would like
to understand how they work.&lt;/p&gt;
&lt;h2&gt;Why an OS?&lt;/h2&gt;
&lt;p&gt;In terms of open-source, there is no doubt that Linux is a work of art, and
I've no idea how it works under the hood. All I know is that a bootloader
such as GRUB loads the operating system, but that is all I know...
better to say that &lt;em&gt;was&lt;/em&gt; all I &lt;em&gt;knew&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I intend to make a few small posts documenting my progress. For now, All
I have is a simple bootloader using BIOS Legacy Boot. It is so beautiful!&lt;/p&gt;
&lt;p&gt;&lt;img alt="DunnOS bootloader" src="images/dunnos-building-by-own-os/bootloader.png"&gt;&lt;/p&gt;
&lt;p&gt;For know you can follow the progress 
&lt;a href="https://github.com/carlosmaniero/dunnos" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Engineer life"></category></entry><entry><title>Asyncio Handle Blocking Functions</title><link href="https://maniero.me/asyncio-handle-blocking-functions.html" rel="alternate"></link><published>2016-02-03T22:00:00-02:00</published><updated>2016-02-03T22:00:00-02:00</updated><author><name>Maniero</name></author><id>tag:maniero.me,2016-02-03:/asyncio-handle-blocking-functions.html</id><summary type="html">&lt;p&gt;When we use concurrency, all tasks are running in the same thread. When the await or yield from keywords is used in the task, the task is suspended and the EventLoop executes the next task. This will be occur until all tasks are completedâ€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we use concurrency, all &lt;a href="https://docs.python.org/3/library/asyncio-task.html"&gt;tasks&lt;/a&gt; are running in the same thread. 
When the &lt;code&gt;await&lt;/code&gt; or &lt;code&gt;yield from&lt;/code&gt; keywords is used in the task, 
the task is suspended and the &lt;a href="https://docs.python.org/3/library/asyncio-eventloop.html"&gt;EventLoop&lt;/a&gt; executes the next task.
This will be occur until all tasks are completed.&lt;/p&gt;
&lt;p&gt;If you have a blocking function, by example, a web request.
All tasks will wait the blocking function be completed. See this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;


&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;slow_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Finish test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Finish test2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Finish test1
0
1
2
3
4
5
6
7
8
9
Finish test2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How can we see, the &lt;code&gt;EventLoop&lt;/code&gt; run the test1
and the test2 only starts after the test1 is completed.&lt;/p&gt;
&lt;p&gt;If you need execute a blocking functions you can use the 
&lt;a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor"&gt;run_in_executor()&lt;/a&gt;
method of the &lt;code&gt;EventLoop&lt;/code&gt;, this will be run the function in an executor 
(by default the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor"&gt;ThreadPoolExecutor&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The usage of &lt;code&gt;run_in_executor&lt;/code&gt; is like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the &lt;code&gt;*args&lt;/code&gt; will be the args of &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the same example using the &lt;code&gt;run_in_executor&lt;/code&gt; and its output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;


&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Finish test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Finish test2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Finish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;6&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Finish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the test2 can be executed while the test1 waits from the &lt;code&gt;slow_function&lt;/code&gt; response.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="asyncio"></category></entry><entry><title>PHP - Long Polling</title><link href="https://maniero.me/php-long-polling.html" rel="alternate"></link><published>2012-07-18T11:25:00-03:00</published><updated>2012-07-18T11:25:00-03:00</updated><author><name>Maniero</name></author><id>tag:maniero.me,2012-07-18:/php-long-polling.html</id><summary type="html">&lt;p&gt;Long Polling is a technique used when you need create a real time application,
where the server will wait from a event occur to response the request.&lt;/p&gt;
&lt;p&gt;On this example, we will create a webchat, using a simple text file.
The server will read the text file,
and will hold â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Long Polling is a technique used when you need create a real time application,
where the server will wait from a event occur to response the request.&lt;/p&gt;
&lt;p&gt;On this example, we will create a webchat, using a simple text file.
The server will read the text file,
and will hold the conection until the file has new lines.
To check it, the server will receive the current line number.&lt;/p&gt;
&lt;p&gt;Go to the code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// Disable max runtime&lt;/span&gt;
&lt;span class="nb"&gt;set_time_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cur_line&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;    
    &lt;span class="c1"&gt;// An infinite loop&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;    
        &lt;span class="c1"&gt;// Read the file&lt;/span&gt;
        &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chat.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$cur_line&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
            &lt;span class="c1"&gt;// Sleep for 1 seccond if no new line&lt;/span&gt;
            &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;// Put new lines in the vector&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cur_line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$cur_line&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nv"&gt;$cur_line&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$cur_line&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// Update the cur_line to response&lt;/span&gt;
            &lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cur_line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$cur_line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// Return an JSON&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// echo the result&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cur_line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see the complete code &lt;a href="https://github.com/carlosmaniero/Php-long-polling"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Old Post&lt;/h4&gt;
&lt;p&gt;This is an old post migrated from my old blog. 
You can see the original content &lt;a href="http://carlosmaniero.blogspot.com.br/2012/07/php-long-polling.html"&gt;here&lt;/a&gt;[pt-br]&lt;/p&gt;</content><category term="PHP"></category><category term="PHP"></category></entry></feed>